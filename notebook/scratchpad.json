{
	"name": "scratchpad",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "bmsparkpool2023",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c1094f82-5081-4c7b-9b39-d27da9f950ed"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a940a49d-4f38-49d5-8ee3-af225083b0bc/resourceGroups/EcosystemHub/providers/Microsoft.Synapse/workspaces/bmworkspace2023/bigDataPools/bmsparkpool2023",
				"name": "bmsparkpool2023",
				"type": "Spark",
				"endpoint": "https://bmworkspace2023.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/bmsparkpool2023",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"a = mssparkutils.credentials.getSecret('bmehubkeyvault2023','test-kv-sc-adls','ls_bmehubkv2023')"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run ce_pipelines/eoy/config/logger_config"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run ce_pipelines/eoy/config/eoy_config"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# get list of files from Azure Data lake storage\r\n",
					"\r\n",
					"\r\n",
					"storageaccountname = mssparkutils.credentials.getSecret(config[\"keyvault.name\"],config[\"storage.account_name\"],config[\"linkedservice.keyvaultls\"])\r\n",
					"logger.info(f\"Storage Account Name - {storageaccountname} - Started.\")\r\n",
					"storagecontainername = mssparkutils.credentials.getSecret(config[\"keyvault.name\"],config[\"storage.container_name\"],config[\"linkedservice.keyvaultls\"])\r\n",
					"logger.info(f\"Storage Container Name - {storageaccountname} - Started.\")\r\n",
					"storageaccountkey = mssparkutils.credentials.getSecret(config[\"keyvault.name\"],config[\"storage.account_key\"],config[\"linkedservice.keyvaultls\"])\r\n",
					"entity = 'eoy'\r\n",
					"\r\n",
					"# storagecontainername = 'test'\r\n",
					"# storageaccountname = 'bmdatalakestorage2023'\r\n",
					"landing_path = 'abfss://'+storagecontainername+'@'+storageaccountname+'.dfs.core.windows.net'+'/'+config[\"storage.landing_dir_name\"]+'/'+(entity)\r\n",
					"logger.info(f\"Storage landing_path - {landing_path}\")\r\n",
					"files_obj_list = mssparkutils.fs.ls(landing_path)\r\n",
					"# files_obj_list = mssparkutils.fs.ls('abfss://test@bmdatalakestorage2023.dfs.core.windows.net/data/landing/eoy/eoy')\r\n",
					"print(files_obj_list)\r\n",
					"print(type(files_obj_list))\r\n",
					"for file_obj in files_obj_list:\r\n",
					"    print(file_obj)\r\n",
					"    print(type(file_obj))\r\n",
					"    # finfo = mssparkutils.handlers.fsHandler.FileInfo(file_obj)\r\n",
					"    print(file_obj.name, ' - ', file_obj.isFile)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"help(mssparkutils.handlers.fsHandler.FileInfo)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = pandas.DataFrame({'Name':['A', 'B', 'C', 'D'], 'ID':[20, 21, 19, 18]})\r\n",
					"print(data)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data.to_csv('abfss://test@bmdatalakestorage2023.dfs.core.windows.net/data/dummy/data_test.csv')"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install neo4j"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import ssl\r\n",
					"# def create_neo4j_driver():\r\n",
					"# auth = basic_auth(NEO4J_USER, NEO4J_PASSWORD)\r\n",
					"ssl_context = ssl.create_default_context()\r\n",
					"ssl_context.load_verify_locations(\"https://bmdatalakestorage2023.blob.core.windows.net/ca-certificates/EY_Enterprise_Root_CA.crt?sp=r&st=2023-03-13T14:47:16Z&se=2023-03-13T22:47:16Z&spr=https&sv=2021-12-02&sr=b&sig=z3tveHlic%2F8ljAPENn37DhnOL03l87Khh%2Bg5o8JxkJo%3D\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"\r\n",
					"def execute_cypher():\r\n",
					"    mssparkutils.fs.mount(\r\n",
					"    \"abfss://ca-certificates@bmdatalakestorage2023.dfs.core.windows.net\",\r\n",
					"    \"/ca-certificates\",\r\n",
					"    {\"linkedService\":\"AzureDataLakeStorage1\"}\r\n",
					"    )\r\n",
					"\r\n",
					"    jobId = mssparkutils.env.getJobId()\r\n",
					"    print(jobId)\r\n",
					"    c_files = mssparkutils.fs.ls(\"abfss://ca-certificates@bmdatalakestorage2023.dfs.core.windows.net\")\r\n",
					"    cert_files = []\r\n",
					"    for file in c_files:\r\n",
					"        if (file.name.endswith(\".crt\")):\r\n",
					"            cert_files.append(\"synfs:/\"+jobId+\"/ca-certificates/\"+file.name)\r\n",
					"\r\n",
					"    for x in range(len(cert_files)):\r\n",
					"        print(cert_files[x])\r\n",
					"    \r\n",
					"    for cert in cert_files:\r\n",
					"        print(cert)\r\n",
					"        mssparkutils.fs.head(cert)\r\n",
					"        ssl_context.load_verify_locations(cert)\r\n",
					"\r\n",
					"    mssparkutils.fs.unmount(\"/ca-certificates\")\r\n",
					""
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.head(\"synfs:/200/ca-certificates/EY_Enterprise_Interim_CA.crt\")"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"execute_cypher()"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.ls(\"abfss://ca-certificates@bmdatalakestorage2023.dfs.core.windows.net\")"
				],
				"execution_count": 10
			}
		]
	}
}