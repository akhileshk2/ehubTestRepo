{
	"name": "source_downloader",
	"properties": {
		"folder": {
			"name": "ce_pipelines/edw/extraction_operator"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "bmsparkpool2023",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5b6d27f8-2d6b-4f6a-abdd-e780dcd0640a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a940a49d-4f38-49d5-8ee3-af225083b0bc/resourceGroups/EcosystemHub/providers/Microsoft.Synapse/workspaces/bmworkspace2023/bigDataPools/bmsparkpool2023",
				"name": "bmsparkpool2023",
				"type": "Spark",
				"endpoint": "https://bmworkspace2023.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/bmsparkpool2023",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import requests\r\n",
					"import tarfile\r\n",
					"from io import BytesIO\r\n",
					"import os\r\n",
					"\r\n",
					"class DataDownloader:\r\n",
					"        \r\n",
					"    def download_data():\r\n",
					"        response = requests.get(\"https://static.crunchbase.com/data_crunchbase/bulk_export_sample.tar.gz\")\r\n",
					"        if response.status_code != 200:\r\n",
					"            print(\"Crunchbase Daily Data Export download failed \")\r\n",
					"            #raise Exception(f\"Crunchbase Daily Data Export download failed - {response.status_code}, {response.content} \")\r\n",
					"        \r\n",
					"        #self._logger.info(f\"Crunchbase Daily Data Export download completed.\")\r\n",
					"        data = BytesIO(response.content)\r\n",
					"        with tarfile.open(fileobj=data) as tar:\r\n",
					"            members = [tar.getmember('organizations.csv')] \r\n",
					"            #tar.extractall(dir_path, members=members)\r\n",
					"        data.close()\r\n",
					"        #self._logger.info(f\"Crunchbase Daily Data Export extraction completed.\")\r\n",
					""
				],
				"execution_count": 9
			}
		]
	}
}