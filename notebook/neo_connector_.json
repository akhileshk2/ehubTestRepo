{
	"name": "neo_connector_",
	"properties": {
		"folder": {
			"name": "AK W"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "bmapachespark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fcf4894b-3716-43ec-bb61-cc67605c8489"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8e862a61-456c-49b5-9e16-45c00c15686b/resourceGroups/synapsepoc/providers/Microsoft.Synapse/workspaces/bmworkspace2022/bigDataPools/bmapachespark",
				"name": "bmapachespark",
				"type": "Spark",
				"endpoint": "https://bmworkspace2022.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/bmapachespark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"import os\r\n",
					"import time\r\n",
					"\r\n",
					"class GraphAdapter:\r\n",
					"    def __init__(self, config, logger):\r\n",
					"        self._config = config\r\n",
					"        self._logger = logger\r\n",
					"        self._connector = GraphDatabase.driver(self._config['neo4j.bolt_url'], auth=(self._config['neo4j.user_name'], self._config['neo4j.password']),encrypted=False)\r\n",
					"\r\n",
					"    def execute_query(self, query):\r\n",
					"        connector = None\r\n",
					"        try:\r\n",
					"            self._logger.info(f\"Query execution initiated.\")\r\n",
					"            start = time.time()\r\n",
					"            with self._connector.session(database=self._config['neo4j.database']) as session:\r\n",
					"                res = session.write_transaction(self._execute_txn, query)\r\n",
					"            end = time.time()\r\n",
					"            self._logger.info(f\"Query execution completed. Execution Time - {end - start} seconds.\")\r\n",
					"            return res\r\n",
					"        except Exception as e:\r\n",
					"            self._logger.error(f\"Query Execution Failed - {e}\")\r\n",
					"\r\n",
					"        \r\n",
					"    def _execute_txn(self, tx, query):\r\n",
					"        res = tx.run(query)\r\n",
					"        values = []\r\n",
					"        for record in res:\r\n",
					"            values.append(dict(record))\r\n",
					"        return values\r\n",
					"\r\n",
					"\r\n",
					"    def execute_update_query(self, query, **kwargs):\r\n",
					"        connector = None\r\n",
					"        try:\r\n",
					"            with self._connector.session(database=self._config['neo4j.database']) as session:\r\n",
					"                res = session.write_transaction(self._execute_arg_txn, query, kwargs)\r\n",
					"            return res\r\n",
					"        except Exception as e:\r\n",
					"            raise e\r\n",
					"\r\n",
					"    def execute_read_query(self, query, **kwargs):\r\n",
					"        connector = None\r\n",
					"        try:\r\n",
					"            with self._connector.session(database=self._config['neo4j.database']) as session:\r\n",
					"                res = session.read_transaction(self._execute_arg_txn, query, kwargs)\r\n",
					"            return res\r\n",
					"        except Exception as e:\r\n",
					"            raise e\r\n",
					"        \r\n",
					"    def _execute_arg_txn(self, tx, query, data):\r\n",
					"        res = tx.run(query, data)\r\n",
					"        values = []\r\n",
					"        for record in res:\r\n",
					"            values.append(dict(record))\r\n",
					"        return values\r\n",
					"    \r\n",
					"        \r\n",
					"    def close(self):\r\n",
					"        try: \r\n",
					"            if self._connector:\r\n",
					"                self._connector.close()\r\n",
					"        except Exception as e:\r\n",
					"            self._logger.error(f\"Exception while closing the connection - {e}\")\r\n",
					"        \r\n",
					""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install neo4j"
				],
				"execution_count": 26
			}
		]
	}
}