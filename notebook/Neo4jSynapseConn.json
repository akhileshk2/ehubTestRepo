{
	"name": "Neo4jSynapseConn",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "bmsparkpool2023",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "bf3c20ee-003b-411d-bae2-cbf20a94f52b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a940a49d-4f38-49d5-8ee3-af225083b0bc/resourceGroups/EcosystemHub/providers/Microsoft.Synapse/workspaces/bmworkspace2023/bigDataPools/bmsparkpool2023",
				"name": "bmsparkpool2023",
				"type": "Spark",
				"endpoint": "https://bmworkspace2023.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/bmsparkpool2023",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"neo4j_bolt_url: \"bolt://54.196.135.240:7687\"\r\n",
					"neo4j_user_name: \"neo4j\"\r\n",
					"neo4j_password: \"diesel-velocities-originals\"\r\n",
					"neo4j_database: \"Blank Sandbox\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run sampleCypher"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(cypher2)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cypher_csv = (\"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/test/data/dummy/person_data.csv?sp=r&st=2023-02-17T11:05:31Z&se=2023-02-17T19:05:31Z&spr=https&sv=2021-06-08&sr=b&sig=kjskARl%2BkBN4W4KvE9mQppOS88ZnTEG1hDFBi58%2B358%3D\"  AS line \r\n",
					"WITH line\r\n",
					"MERGE (per:person{pname:line.name})\r\n",
					"ON CREATE SET per.pdept = line.dept\"\"\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cypher_csv2 =\"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/test/data/landing/ent/ent/part-00002.csv?se=2023-02-17T11%3A18%3A09Z&sp=r&sv=2021-08-06&ss=b&srt=o&sig=oYHl8YLhkwbxP7ndmz4rU%2BDQvOweRItMZntgbiF0lXU%3D\"  AS line  \r\n",
					"\r\n",
					"WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"\r\n",
					"MATCH (ey:EY:Organization{key:'ey'})\r\n",
					"\r\n",
					"MERGE (per:Person{key:line.per_key})\r\n",
					"ON CREATE SET per.name = line.entrepreneurs_name\r\n",
					"ON CREATE SET per.email = line.entrepreneurs_email\r\n",
					"ON CREATE SET per.phone = line.entrepreneurs_mobile_phone\r\n",
					"ON CREATE SET per.createdAt = timeStamp\r\n",
					"SET per.updatedAt = timeStamp\r\n",
					"\r\n",
					"MERGE (psv:PersonSourceVersion:Version{id:'ENT'+ line.per_id, source:'ent'})\r\n",
					"ON CREATE SET psv.createdAt = timeStamp\r\n",
					"SET psv.updatedAt = timeStamp\r\n",
					"SET psv.name = line.entrepreneurs_name\r\n",
					"SET psv.email = line.entrepreneurs_email\r\n",
					"SET psv.phone = line.entrepreneurs_mobile_phone\r\n",
					"\r\n",
					"MERGE (per)-[:HAS_VERSION]->(psv)\r\n",
					"\r\n",
					"Merge (org:Organization{key:line.org_key})\r\n",
					"ON CREATE SET org.name = line.company_name\r\n",
					"ON CREATE SET org.address = line.company_address\r\n",
					"ON CREATE SET org.postalCode = line.company_postal_code\r\n",
					"ON CREATE SET org.phone = line.company_telephone\r\n",
					"ON CREATE SET org.foundedOn = line.company_founded_on\r\n",
					"ON CREATE SET org.homepageURL = line.company_website\r\n",
					"ON CREATE SET org.createdAt = timeStamp\r\n",
					"SET org.updatedAt = timeStamp\r\n",
					"SET org.tradingName = line.company_trading_name\r\n",
					"SET org.isOwned = CASE line.company_owned_flag WHEN 'Yes' THEN true WHEN 'No' THEN false ELSE null END \r\n",
					"SET org.ownedBy = line.company_owned_name\r\n",
					"SET org.geoReach = line.company_geo_reach\r\n",
					"SET org.duns = line.company_duns_no\r\n",
					"SET org.holding = CASE WHEN trim(COALESCE(line.company_public_private_flag, '')) <> '' THEN  trim(line.company_public_private_flag) ELSE NULL END\r\n",
					"SET org.goPublicYear = line.company_go_public_year\r\n",
					"SET org.tradingSymbol = line.company_trading_symbol\r\n",
					"SET org.connectionToEYType = 'direct'\r\n",
					"\r\n",
					"MERGE (osv:OrgSourceVersion:Version{id:'ENT'+line.org_id, source:'ent'})\r\n",
					"ON CREATE SET osv.createdAt = timeStamp\r\n",
					"SET osv.updatedAt = timeStamp\r\n",
					"SET osv.name = line.company_name\r\n",
					"SET osv.tradingName = line.company_trading_name\r\n",
					"SET osv.address = line.company_address\r\n",
					"SET osv.country = line.company_country\r\n",
					"SET osv.postalCode = line.company_postal_code\r\n",
					"SET osv.region = line.company_region_state\r\n",
					"SET osv.city = line.company_city\r\n",
					"SET osv.phone = line.company_telephone\r\n",
					"SET osv.socialMedia = line.social_media\r\n",
					"SET osv.isOwned = CASE line.company_owned_flag WHEN 'Yes' THEN true WHEN 'No' THEN false ELSE null END \r\n",
					"SET osv.ownedBy = line.company_owned_name\r\n",
					"SET osv.foundedOn = line.company_founded_on\r\n",
					"SET osv.geoReach = line.company_geo_reach\r\n",
					"SET osv.duns = line.company_duns_no\r\n",
					"SET osv.homepageURL = line.company_website\r\n",
					"SET osv.holding = CASE WHEN trim(COALESCE(line.company_public_private_flag, '')) <> '' THEN  trim(line.company_public_private_flag) ELSE NULL END\r\n",
					"SET osv.goPublicYear = line.company_go_public_year\r\n",
					"SET osv.tradingSymbol = line.company_trading_symbol\r\n",
					"\r\n",
					"MERGE (org)-[:HAS_VERSION]->(osv)\r\n",
					"\r\n",
					"MERGE (per)-[wi:WORKS_IN]->(org)\r\n",
					"ON CREATE SET wi.source = 'ent'\r\n",
					"SET wi.jobTitle = line.entrepreneurs_job_title\r\n",
					"SET wi.phone = line.entrepreneurs_work_phone\r\n",
					"SET wi.isFounder = CASE line.entrepreneurs_company_founder WHEN 'Yes' THEN true WHEN 'No' THEN false ELSE null END\r\n",
					"SET wi.percentOwned = line.entrepreneurs_company_founder\r\n",
					"\r\n",
					"MERGE (e:Event{key:line.event_key})\r\n",
					"ON CREATE SET e.createdAt = timeStamp\r\n",
					"SET e.updatedAt = timeStamp\r\n",
					"SET e.name = line.event_name\r\n",
					"SET e.type = CASE WHEN line.source = 'EOY UX' THEN 'EOY' ELSE line.source END\r\n",
					"SET e.area = line.event_area\r\n",
					"SET e.region = line.event_region\r\n",
					"SET e.year = line.event_year\r\n",
					"SET e.parentSource = 'ent'\r\n",
					"SET e.source = CASE WHEN line.source = 'EOY UX' THEN 'eoy' ELSE TOLOWER(line.source) END\r\n",
					"\r\n",
					"MERGE (per)-[pip:IS_PARTICIPANT]->(e)\r\n",
					"ON CREATE SET pip.createdAt = timeStamp\r\n",
					"SET pip.updatedAt = timeStamp\r\n",
					"SET pip.nominationId = line.event_nomination_id\r\n",
					"SET pip.nominationDate = line.event_nomination_date\r\n",
					"SET pip.source = 'ent'\r\n",
					"\r\n",
					"MERGE (org)-[oip:IS_PARTICIPANT]->(e)\r\n",
					"ON CREATE SET oip.createdAt = timeStamp\r\n",
					"SET oip.updatedAt = timeStamp\r\n",
					"SET oip.nominationId = line.event_nomination_id\r\n",
					"SET oip.nominationDate = line.event_nomination_date\r\n",
					"SET oip.source = 'ent'\r\n",
					"\r\n",
					"// EY Alumni\r\n",
					"FOREACH(ignore IN CASE WHEN line.ey_alumini_tier IS NOT NULL AND line.ey_alumini_tier <> '' THEN [1] ELSE [] END | \r\n",
					"    MERGE (per)-[awi:WORKS_IN]->(ey)\r\n",
					"    SET awi.source = 'ent'\r\n",
					"    SET awi.isActive = false\r\n",
					"    SET awi.isPrimary = false \r\n",
					"    SET awi.tier = line.ey_alumini_tier\r\n",
					")\r\n",
					"\r\n",
					"// Other EY data\r\n",
					"FOREACH(ignore IN CASE WHEN line.is_ey IN ['True', 'TRUE', 'true', true] THEN [1] ELSE [] END | \r\n",
					"    MERGE (e)-[ict:IS_CONNECTED_TO]->(ey)\r\n",
					"    SET ict.relationshipManager = line.ey_relationship_mgr\r\n",
					"    SET ict.host = line.ey_host\r\n",
					"    SET ict.lastTargetDate = line.ey_last_target_date\r\n",
					"    SET ict.targetNotes = line.ey_target_notes\r\n",
					"    SET ict.gnFlag = line.ey_growth_navigator_flag\r\n",
					"    SET ict.gnDate = line.ey_growth_navigator_date\r\n",
					"    SET ict.familyBiz = line.ey_family_biz_flag\r\n",
					")\r\n",
					"\r\n",
					"// EY Client\r\n",
					"FOREACH(ignore IN CASE WHEN line.ey_client_flag = 'Yes' THEN [1] ELSE [] END |\r\n",
					"    MERGE (org)-[:HAS_CUSTOMER_INFO{source:'ent'}]->(ci:CustomerInfo)\r\n",
					"    ON CREATE SET ci.id = line.ey_client_id\r\n",
					"    ON CREATE SET ci.createdAt = timeStamp\r\n",
					"    SET ci.updatedAt = timeStamp \r\n",
					"    SET ci.channel = line.ey_channel_nm\r\n",
					"    SET ci.marketSegment = line.ey_market_segment\r\n",
					"\r\n",
					"    SET osv.channel = line.ey_channel_nm\r\n",
					"    SET osv.clientId = line.ey_client_id\r\n",
					"\r\n",
					"    SET org.channel = line.ey_channel_nm\r\n",
					"    SET org.clientId = line.ey_client_id\r\n",
					")\r\n",
					"\r\n",
					"// EY IndustrySector (ey_industry transformed - & to and)\r\n",
					"FOREACH(ignore IN CASE WHEN line.ey_industry IS NOT NULL AND line.ey_industry <> '' THEN [1] ELSE [] END | \r\n",
					"    MERGE(sec:Sector{id:TOLOWER(line.ey_industry)})\r\n",
					"    ON CREATE SET sec.name = line.ey_industry\r\n",
					"    ON CREATE SET sec.createdAt = timeStamp\r\n",
					"    SET sec.updatedAt = timeStamp\r\n",
					"    \r\n",
					"    MERGE (org)-[ii:IS_IN]->(sec)\r\n",
					"    ON CREATE SET ii.createdAt = timeStamp\r\n",
					"    SET ii.updatedAt = timeStamp\r\n",
					"    SET ii.source = 'ent')\"\"\"\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"query_dict = {\"organizations\":cypher_csv}"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#correct load using single cypher query at a time stored in notebook sampleCypher and sampleCypher5\r\n",
					"from neo4j import GraphDatabase\r\n",
					"\r\n",
					"def execute_txn(tx,query):\r\n",
					"    res = tx.run(query)\r\n",
					"    values = []\r\n",
					"    for record in res:\r\n",
					"        values.append(dict(record))\r\n",
					"\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.196.135.240:7687\", auth=('neo4j',\"diesel-velocities-originals\"))  \r\n",
					"entities = ['organizations']\r\n",
					"# cypherQueryList = []\r\n",
					"#sas_url_val = \"https://bmdatalakestorage2023.blob.core.windows.net/test/data/dummy/person_data.csv?sp=r&st=2023-02-16T10:10:25Z&se=2023-02-17T18:10:25Z&spr=https&sv=2021-06-08&sr=b&sig=n4gT4GV%2FXJZaktjsvArNQbDYVCpVL%2FUJkDX0CJ3gPiU%3D\"\r\n",
					"\r\n",
					"for entity in entities:\r\n",
					"    # cypherQueryList = [cypher_csv]\r\n",
					"    cypherQuery = query_dict[entity]\r\n",
					"    print(cypherQuery)\r\n",
					"    #cypherQuery = cypherQuery.replace('<<SAS_URL>>',sas_url_val)\r\n",
					"    #print(cypherQuery)\r\n",
					"    with connector.session(database = 'neo4j') as session:\r\n",
					"        session.write_transaction(execute_txn,cypherQuery)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#correct load for erms data with referencing sampleCypher Notebook\r\n",
					"from neo4j import GraphDatabase\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.196.135.240:7687\", auth=('neo4j',\"diesel-velocities-originals\"))  \r\n",
					"entities = ['organizations']  \r\n",
					"def execute_txn(tx,query):\r\n",
					"    res = tx.run(query)\r\n",
					"    values = []\r\n",
					"    for record in res:\r\n",
					"        values.append(dict(record))\r\n",
					"\r\n",
					"for entity in entities:\r\n",
					"    # cypherQueryList = [cypher_csv]\r\n",
					"    cypherQueryList = query_dict[entity]\r\n",
					"    with connector.session(database = 'neo4j') as session:\r\n",
					"        session.write_transaction(execute_txn,cypherQueryList)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#correct load using cypher query list stored in notebook sampleCypher and sampleCypher5\r\n",
					"from neo4j import GraphDatabase\r\n",
					"\r\n",
					"def execute_txn(tx,*queryList):\r\n",
					"    for query in queryList:\r\n",
					"        res = tx.run(query)\r\n",
					"        values = []\r\n",
					"        for record in res:\r\n",
					"            values.append(dict(record))\r\n",
					"\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.196.135.240:7687\", auth=('neo4j',\"diesel-velocities-originals\"))  \r\n",
					"entities = ['organizations','degrees']\r\n",
					"cypherQueryList = []\r\n",
					"\r\n",
					"for entity in entities:\r\n",
					"    # cypherQueryList = [cypher_csv]\r\n",
					"    cypherQueryList = query_dict[entity]\r\n",
					"    print(cypherQueryList)\r\n",
					"    with connector.session(database = 'neo4j') as session:\r\n",
					"        session.write_transaction(execute_txn,*cypherQueryList)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sas_url = \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\"\r\n",
					"   \r\n",
					"cypher = (\"\"\"LOAD CSV WITH HEADERS FROM \"<<SAS_URL>>\" AS line\r\n",
					"    WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"    MERGE (norg:Organization{key:line.org_key})\r\n",
					"    ON CREATE SET norg.role = line.role\r\n",
					"    ON CREATE SET norg.createdAt = timeStamp\r\n",
					"    SET norg.updatedAt = timeStamp\r\n",
					"    SET norg.name = line.name\r\n",
					"    SET norg.role = line.role \r\n",
					"    SET norg.type = line.type\"\"\")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install neo4j"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run ermsCypher"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install neo4j"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#correct load for erms data with referencing ermsCypher Notebook\r\n",
					"from neo4j import GraphDatabase\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=('neo4j',\"restriction-component-descriptions\"))   \r\n",
					"def execute_txn(tx,query):\r\n",
					"    res = tx.run(query)\r\n",
					"    values = []\r\n",
					"    for record in res:\r\n",
					"        values.append(dict(record))\r\n",
					"with connector.session(database = 'neo4j') as session:\r\n",
					"    session.write_transaction(execute_txn,cypher)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run sampleCypher"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#correct load for erms data with referencing sampleCypher Notebook\r\n",
					"from neo4j import GraphDatabase\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=('neo4j',\"restriction-component-descriptions\"))   \r\n",
					"def execute_txn(tx,query):\r\n",
					"    res = tx.run(query)\r\n",
					"    values = []\r\n",
					"    for record in res:\r\n",
					"        values.append(dict(record))\r\n",
					"with connector.session(database = 'neo4j') as session:\r\n",
					"    session.write_transaction(execute_txn,cypher2)"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run sampleCypher5"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install neo4j"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#correct load using cypher query stored in notebook sampleCypher and sampleCypher5\r\n",
					"from neo4j import GraphDatabase\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=('neo4j',\"restriction-component-descriptions\"))   \r\n",
					"def execute_txn(tx,*queryList):\r\n",
					"    for query in queryList:\r\n",
					"        res = tx.run(query)\r\n",
					"        values = []\r\n",
					"        for record in res:\r\n",
					"            values.append(dict(record))\r\n",
					"with connector.session(database = 'neo4j') as session:\r\n",
					"    cypherQueryList = [cypher5,cypher2,cypher]\r\n",
					"    session.write_transaction(execute_txn,*cypherQueryList)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#correct load for erms data\r\n",
					"from neo4j import GraphDatabase\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=('neo4j',\"restriction-component-descriptions\"))   \r\n",
					"def execute_txn(tx,query):\r\n",
					"    res = tx.run(query)\r\n",
					"    values = []\r\n",
					"    for record in res:\r\n",
					"        values.append(dict(record))\r\n",
					"with connector.session(database = 'neo4j') as session:\r\n",
					"    cypher = \"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023/data/landing/erms/organizations_inc/part-00000.csv?sp=r&st=2023-02-01T11:50:20Z&se=2023-02-02T19:50:20Z&spr=https&sv=2021-06-08&sr=b&sig=Q764ixiccprFrjAf5T5UcptEt4aXXPL%2BE5vsNut9jkU%3D\" AS line\r\n",
					"    WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"    MERGE (norg:Organization{key:line.org_key})\r\n",
					"    ON CREATE SET norg.role = line.role\"\"\"\r\n",
					"    session.write_transaction(execute_txn,cypher)"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install neo4j"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"\r\n",
					"# URI examples: \"neo4j://localhost\", \"neo4j+s://xxx.databases.neo4j.io\"\r\n",
					"URI = \"bolt://54.165.7.198:7687\"\r\n",
					"AUTH = (\"neo4j\", \"restriction-component-descriptions\")\r\n",
					"\r\n",
					"with GraphDatabase.driver(URI, auth=AUTH) as driver:\r\n",
					"\r\n",
					"\r\n",
					"    with driver.session(database=\"Blank Sandbox\") as session:\r\n",
					"        \r\n",
					"\r\n",
					"        driver.verify_connectivity()"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install neo4j"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" from neo4j import GraphDatabase\r\n",
					" def execute_txn(tx, query):\r\n",
					"     connector = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=('neo4j',\"restriction-component-descriptions\"))\r\n",
					"     cypher = \"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\" AS line\r\n",
					"     WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"     MERGE (norg:Organization{key:line.org_key})\r\n",
					"     ON CREATE SET norg.role = line.role\r\n",
					"     ON CREATE SET norg.createdAt = timeStamp\r\n",
					"     SET norg.updatedAt = timeStamp\r\n",
					"     SET norg.name = line.name\r\n",
					"     SET norg.role = line.role \r\n",
					"     SET norg.type = line.type\"\"\" \r\n",
					"     with connector.session(database=\"Blank Sandbox\") as session:\r\n",
					"         session.write_transaction(execute_txn,cypher)\r\n",
					"     res = tx.run(query)\r\n",
					"     values = []\r\n",
					"     for record in res:\r\n",
					"         values.append(dict(record))"
				],
				"execution_count": 77
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#correct code for sample data\r\n",
					"from neo4j import GraphDatabase\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=('neo4j',\"restriction-component-descriptions\"))   \r\n",
					"def execute_txn(tx,query):\r\n",
					"    res = tx.run(query)\r\n",
					"    values = []\r\n",
					"    for record in res:\r\n",
					"        values.append(dict(record))\r\n",
					"with connector.session(database='neo4j') as session:\r\n",
					"    cypher = \"CREATE (a:Person {name: 'John Doe'})\"\r\n",
					"    session.write_transaction(execute_txn,cypher)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=('neo4j',\"restriction-component-descriptions\"))   \r\n",
					"def execute_txn(tx,query):\r\n",
					"    res = tx.run(query)\r\n",
					"    values = []\r\n",
					"    for record in res:\r\n",
					"        values.append(dict(record))\r\n",
					"with connector.session(database=\"Blank Sandbox\") as session:\r\n",
					"    cypher = \"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\" AS line\r\n",
					"     WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"     MERGE (norg:Organization{key:line.org_key})\r\n",
					"     ON CREATE SET norg.role = line.role\r\n",
					"     ON CREATE SET norg.createdAt = timeStamp\r\n",
					"     SET norg.updatedAt = timeStamp\r\n",
					"     SET norg.name = line.name\r\n",
					"     SET norg.role = line.role \r\n",
					"     SET norg.type = line.type\"\"\"  \r\n",
					"    session.write_transaction(execute_txn,cypher)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=('neo4j',\"restriction-component-descriptions\"))\r\n",
					"#cypher =  \r\n",
					"def create_node(tx):\r\n",
					"    tx.run(\"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\" AS line\r\n",
					"WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"MERGE (norg:Organization{key:line.org_key})\r\n",
					"ON CREATE SET norg.role = line.role\r\n",
					"ON CREATE SET norg.createdAt = timeStamp\r\n",
					"SET norg.updatedAt = timeStamp\r\n",
					"SET norg.name = line.name\r\n",
					"SET norg.role = line.role \r\n",
					"SET norg.type = line.type\"\"\")\r\n",
					"with connector.session(database=\"Blank Sandbox\") as session:\r\n",
					"    \r\n",
					"    session.write_transaction(create_node)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#def build_query(sas_url):\r\n",
					"sas_url = \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\"\r\n",
					"cypher = (\"\"\"LOAD CSV WITH HEADERS FROM \"<<SAS_URL>>\" AS line\r\n",
					"WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"MERGE (norg:Organization{key:line.org_key})\r\n",
					"ON CREATE SET norg.role = line.role\r\n",
					"ON CREATE SET norg.createdAt = timeStamp\r\n",
					"SET norg.updatedAt = timeStamp\r\n",
					"SET norg.name = line.name\r\n",
					"SET norg.role = line.role \r\n",
					"SET norg.type = line.type\"\"\")\r\n",
					"    #query = cypher.replace('<<SAS_URL>>', sas_url)\r\n",
					"    #return query"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cypher = \"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\" AS line\r\n",
					"WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"MERGE (norg:Organization{key:line.org_key})\r\n",
					"ON CREATE SET norg.role = line.role\r\n",
					"ON CREATE SET norg.createdAt = timeStamp\r\n",
					"SET norg.updatedAt = timeStamp\r\n",
					"SET norg.name = line.name\r\n",
					"SET norg.role = line.role \r\n",
					"SET norg.type = line.type\"\"\""
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"import os\r\n",
					"import time\r\n",
					"\r\n",
					"class GraphAdapter:\r\n",
					"    def __init__(self, config, logger):\r\n",
					"        self._config = config\r\n",
					"        self._logger = logger\r\n",
					"        self._connector = GraphDatabase.driver(self._config['neo4j.bolt_url'], \r\n",
					"        auth=(self._config['neo4j.user_name'], self._config['neo4j.password']),\r\n",
					"        encrypted=False)\r\n",
					"\r\n",
					"    def execute_query(self, query):\r\n",
					"        connector = None\r\n",
					"        try:\r\n",
					"            self._logger.info(f\"Query execution initiated.\")\r\n",
					"            start = time.time()\r\n",
					"            with self._connector.session(database=self._config['neo4j_database']) as session:\r\n",
					"                res = session.write_transaction(self._execute_txn, query)\r\n",
					"            end = time.time()\r\n",
					"            self._logger.info(f\"Query execution completed. Execution Time - {end - start} seconds.\")\r\n",
					"            return res\r\n",
					"        except Exception as e:\r\n",
					"            self._logger.error(f\"Query Execution Failed - {e}\")\r\n",
					"\r\n",
					"        \r\n",
					"    def _execute_txn(self, tx, query):\r\n",
					"        res = tx.run(query)\r\n",
					"        values = []\r\n",
					"        for record in res:\r\n",
					"            values.append(dict(record))\r\n",
					"        return values\r\n",
					""
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run neo_connector"
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#from neo4j import Graph\r\n",
					"from neo4j import GraphDatabase\r\n",
					"#sas_url = \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\"\r\n",
					"#if sas_url:\r\n",
					"    #query = build_query(sas_url)\r\n",
					"if query:\r\n",
					"    \r\n",
					"\r\n",
					"    graph.execute_query(query)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"neo4j_bolt_url: \"bolt://54.165.7.198:7687\"\r\n",
					"neo4j_user_name: \"neo4j\"\r\n",
					"neo4j_password: \"restriction-component-descriptions\"\r\n",
					"neo4j_database: \"Blank Sandbox\""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cypher = \"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\" AS line\r\n",
					"WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"MERGE (norg:Organization{key:line.org_key})\r\n",
					"ON CREATE SET norg.role = line.role\r\n",
					"ON CREATE SET norg.createdAt = timeStamp\r\n",
					"SET norg.updatedAt = timeStamp\r\n",
					"SET norg.name = line.name\r\n",
					"SET norg.role = line.role \r\n",
					"SET norg.type = line.type\"\"\""
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"import os\r\n",
					"import time\r\n",
					"\r\n",
					"class GraphAdapter:\r\n",
					"    def __init__(self, config, logger):\r\n",
					"        self._config = config\r\n",
					"        self._logger = logger\r\n",
					"        self._connector = GraphDatabase.driver(self._config['neo4j_bolt_url'], auth=(self._config['neo4j_user_name'], self._config['neo4j_password']),encrypted=False)\r\n",
					"\r\n",
					"    def execute_query(self, query):\r\n",
					"        connector = None\r\n",
					"        try:\r\n",
					"            self._logger.info(f\"Query execution initiated.\")\r\n",
					"            start = time.time()\r\n",
					"            with self._connector.session(database=self._config['neo4j_database']) as session:\r\n",
					"                res = session.write_transaction(execute_txn, cypher)\r\n",
					"            end = time.time()\r\n",
					"            self._logger.info(f\"Query execution completed. Execution Time - {end - start} seconds.\")\r\n",
					"            return res\r\n",
					"        except Exception as e:\r\n",
					"            self._logger.error(f\"Query Execution Failed - {e}\")\r\n",
					"\r\n",
					"        \r\n",
					"    def execute_txn(tx, query):\r\n",
					"        res = tx.run(query)\r\n",
					"        values = []\r\n",
					"        for record in res:\r\n",
					"            values.append(dict(record))\r\n",
					"        return values\r\n",
					""
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"driver = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=(\"neo4j\",\"restriction-component-descriptions\"))\r\n",
					"def create_node(tx):\r\n",
					"    tx.run(\"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\" AS line\r\n",
					"WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"MERGE (norg:Organization{key:line.org_key})\r\n",
					"ON CREATE SET norg.role = line.role\r\n",
					"ON CREATE SET norg.createdAt = timeStamp\r\n",
					"SET norg.updatedAt = timeStamp\r\n",
					"SET norg.name = line.name\r\n",
					"SET norg.role = line.role \r\n",
					"SET norg.type = line.type\"\"\")\r\n",
					"with driver.session() as session:\r\n",
					"    session.write_transaction(create_node)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sas_url = \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\"\r\n",
					"cypher = (\"\"\"LOAD CSV WITH HEADERS FROM \"<<SAS_URL>>\" AS line\r\n",
					"WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"MERGE (norg:Organization{key:line.org_key})\r\n",
					"ON CREATE SET norg.role = line.role\r\n",
					"ON CREATE SET norg.createdAt = timeStamp\r\n",
					"SET norg.updatedAt = timeStamp\r\n",
					"SET norg.name = line.name\r\n",
					"SET norg.role = line.role \r\n",
					"SET norg.type = line.type\"\"\")\r\n",
					"query = cypher.replace('<<SAS_URL>>', sas_url)\r\n",
					"driver = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=(\"neo4j\",\"restriction-component-descriptions\"))\r\n",
					"def create_node(tx):\r\n",
					"    tx.run(query)\r\n",
					"with driver.session() as session:\r\n",
					"    session.write_transaction(create_node)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"driver = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=(\"neo4j\",\"restriction-component-descriptions\"))\r\n",
					"def create_node(tx):\r\n",
					"    tx.run(\"CREATE (a:Person {name: 'John Doe'})\")\r\n",
					"with driver.session() as session:\r\n",
					"    session.write_transaction(create_node)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"connector = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=('neo4j',\"restriction-component-descriptions\"))   \r\n",
					"def execute_txn(tx,query):\r\n",
					"    res = tx.run(query)\r\n",
					"    values = []\r\n",
					"    for record in res:\r\n",
					"        values.append(dict(record))\r\n",
					"with connector.session() as session:\r\n",
					"    session.write_transaction(execute_txn,cypher)"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"driver = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=(\"neo4j\",\"restriction-component-descriptions\"))\r\n",
					"def create_node(tx):\r\n",
					"    tx.run(\"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\" AS line\r\n",
					"    WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"    MERGE (norg:Organization{key:line.org_key})\r\n",
					"    ON CREATE SET norg.role = line.role\r\n",
					"    ON CREATE SET norg.createdAt = timeStamp\r\n",
					"    SET norg.updatedAt = timeStamp\r\n",
					"    SET norg.name = line.name\r\n",
					"    SET norg.role = line.role \r\n",
					"    SET norg.type = line.type\"\"\")\r\n",
					"with driver.session() as session:\r\n",
					"    session.write_transaction(create_node)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\"\"\"LOAD CSV WITH HEADERS FROM \"https://bmdatalakestorage2023.blob.core.windows.net/bmfilesystem2023?sp=r&st=2023-01-31T08:12:55Z&se=2023-02-03T16:12:55Z&spr=https&sv=2021-06-08&sr=c&sig=epfAUlvBGYspMim2vQFxPlm1LkbJyndeFkDS9HVL5kk%3D\" AS line\r\n",
					"    WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp\r\n",
					"    MERGE (norg:Organization{key:line.org_key})\r\n",
					"    ON CREATE SET norg.role = line.role\r\n",
					"    ON CREATE SET norg.createdAt = timeStamp\r\n",
					"    SET norg.updatedAt = timeStamp\r\n",
					"    SET norg.name = line.name\r\n",
					"    SET norg.role = line.role \r\n",
					"    SET norg.type = line.type\"\"\""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from neo4j import GraphDatabase\r\n",
					"driver = GraphDatabase.driver(\"bolt://54.165.7.198:7687\", auth=(\"neo4j\",\"restriction-component-descriptions\"))\r\n",
					"def create_node(tx):\r\n",
					"    tx.run(\"LOAD CSV WITH HEADERS FROM \"<<SAS_URL>>\" AS line\r\n",
					"WITH line, apoc.date.format(datetime().epochMillis,\"ms\", \"yyyy-MM-dd HH:mm:ss\") AS timeStamp,\r\n",
					"MERGE (norg:Organization{key:line.org_key})\r\n",
					"ON CREATE SET norg.role = line.role\\\r\n",
					"ON CREATE SET norg.createdAt = timeStamp\r\n",
					"SET norg.updatedAt = timeStamp\r\n",
					"SET norg.name = line.name\r\n",
					"SET norg.role = line.role\r\n",
					"SET norg.type = line.type\")\r\n",
					"with driver.session() as session:\r\n",
					"\r\n",
					"    session.write_transaction(create_node)"
				]
			}
		]
	}
}