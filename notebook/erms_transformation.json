{
	"name": "erms_transformation",
	"properties": {
		"folder": {
			"name": "ce_pipelines/erms/transformation_operator"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "bmsparkpool22",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "eef53400-2340-4a09-85c8-cd18fb99c5b0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8e862a61-456c-49b5-9e16-45c00c15686b/resourceGroups/synapsepoc/providers/Microsoft.Synapse/workspaces/bmworkspace2022/bigDataPools/bmsparkpool22",
				"name": "bmsparkpool22",
				"type": "Spark",
				"endpoint": "https://bmworkspace2022.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/bmsparkpool22",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"pip install azure-storage-file-datalake"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install azure-data-tables"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run ce_pipelines/common/transformation_controller"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import re\r\n",
					"import json\r\n",
					"import os\r\n",
					"import tempfile\r\n",
					"import pandas as pd\r\n",
					"import csv\r\n",
					"\r\n",
					"#from ce_pipelines import TransformationController\r\n",
					"\r\n",
					"class Transformations(TransformationController):\r\n",
					"\r\n",
					"    def __init__(self, config, logger):\r\n",
					"        super().__init__(config, logger)\r\n",
					"        self.local_cache = {\r\n",
					"            \"org_key_lookup.csv\": None\r\n",
					"        }\r\n",
					"    \r\n",
					"    def generate_org_id(self, val):\r\n",
					"        parent_account_name = val[1]\r\n",
					"        account_name = val[0]\r\n",
					"        text = None\r\n",
					"        if parent_account_name and parent_account_name.strip() != '':\r\n",
					"            text = parent_account_name.lower().strip()\r\n",
					"        else:\r\n",
					"            text = account_name.lower().strip()\r\n",
					"        return text\r\n",
					"\r\n",
					"    def map_types(self, types):\r\n",
					"\r\n",
					"        type_lookup = {\r\n",
					"            'Type 1': 'Global sponsored alliance',\r\n",
					"            'Type 2': 'Area sponsored alliance',\r\n",
					"            'Type 3': 'Sector/Service Line/Region Sponsored Alliance',\r\n",
					"            'Type 4': 'Collaborative relationships',\r\n",
					"            'Type 5': 'Service delivery relationships',\r\n",
					"            'Type 6': 'Resale relationships',\r\n",
					"            'Type 7': 'IP relationships',\r\n",
					"            'Type 8': 'Joint Ventures'\r\n",
					"        }\r\n",
					"\r\n",
					"        mappings = []\r\n",
					"        if types:\r\n",
					"            for type in types.strip().split(','):\r\n",
					"                mapping = type_lookup.get(type.strip(), type.strip())\r\n",
					"                mappings.append(mapping)\r\n",
					"        \r\n",
					"        return ','.join(mappings) if mappings else None"
				],
				"execution_count": 4
			}
		]
	}
}